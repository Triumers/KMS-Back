<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.triumers.kmsback.post.query.repository.QryPostMapper">

    <resultMap id="likeResultMap" type="org.triumers.kmsback.post.query.aggregate.entity.QryLike">
        <id property="id" column="ID"/>
        <result property="employeeId" column="EMPLOYEE_ID"/>
        <result property="postId" column="POST_ID"/>
    </resultMap>

    <resultMap id="tagResultMap" type="org.triumers.kmsback.post.query.aggregate.entity.QryTag">
        <id property="id" column="TAG_ID"/>
        <result property="name" column="NAME"/>
    </resultMap>

    <resultMap id="postResultMap" type="org.triumers.kmsback.post.query.aggregate.entity.QryPostAndTag">
        <id property="id" column="POST_ID"/>
        <result property="isEditing" column="IS_EDITING"/>
        <result property="title" column="TITLE"/>
        <result property="content" column="CONTENT"/>
        <result property="postImg" column="POST_IMG"/>
        <result property="createdAt" column="CREATED_AT"/>
        <result property="deletedAt" column="DELETED_AT"/>
        <result property="authorId" column="AUTHOR_ID"/>
        <result property="originId" column="ORIGIN_ID"/>
        <result property="recentId" column="RECENT_ID"/>
        <result property="tabRelationId" column="TAB_RELATION_ID"/>
        <result property="categoryId" column="CATEGORY_ID"/>
        <collection property="tags" resultMap="tagResultMap"/>
    </resultMap>

    <select id="selectTabPostList" resultMap="postResultMap">
        SELECT
               A.ID AS POST_ID,
               A.TITLE,
               A.CONTENT,
               A.POST_IMG,
               A.CREATED_AT,
               A.AUTHOR_ID,
               A.ORIGIN_ID,
               A.RECENT_ID,
               A.TAB_RELATION_ID,
               A.CATEGORY_ID
          FROM tbl_post A
         WHERE ((A.ORIGIN_ID IS NULL AND A.RECENT_ID IS NULL AND A.DELETED_AT IS NULL)
            OR A.ID IN (
                         SELECT RECENT_ID
                         FROM tbl_post
                         WHERE (ORIGIN_ID IS NULL AND RECENT_ID IS NOT NULL AND DELETED_AT IS NULL)
                       ))
        <if test="request.tabRelationId != null">
            AND A.TAB_RELATION_ID = #{request.tabRelationId}
        </if>
        <if test="request.tabRelationId == null and !request.tabList.isEmpty() ">
            AND A.TAB_RELATION_ID IN
            <foreach collection="request.tabList" item="tab" open="(" close=")" separator="," >
                #{tab}
            </foreach>
        </if>
        <if test="request.categoryId != null">
           AND A.CATEGORY_ID = #{request.categoryId}
        </if>
        <if test="request.categoryId == null">
            AND A.CATEGORY_ID IS NULL
        </if>
        <if test="request.title != null">
           AND A.TITLE LIKE CONCAT('%', #{request.title}, '%')
        </if>
        <if test="request.content != null">
           AND A.CONTENT LIKE CONCAT('%', #{request.content}, '%')
        </if>
        <if test="request.tags != null and !request.tags.isEmpty()">
           AND A.ID IN (
                         SELECT B.POST_ID
                           FROM tbl_post_tag B
                           JOIN tbl_tag C ON B.TAG_ID = C.ID
                          WHERE C.NAME IN
                          <foreach collection="request.tags" item="tag" open="(" close=")" separator="," >
                              #{tag}
                          </foreach>
                          GROUP BY B.POST_ID
                         HAVING COUNT(DISTINCT C.NAME) = ${request.tags.size}
                       )
        </if>
         ORDER BY COALESCE(A.ORIGIN_ID, A.ID) DESC
        <if test="pageable != null">
         LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
        </if>
    </select>

    <select id="selectTagList" parameterType="_int" resultMap="tagResultMap">
        SELECT
               B.ID AS TAG_ID,
               B.NAME
          FROM tbl_post_tag A
          JOIN tbl_tag B ON (A.TAG_ID = B.ID)
         WHERE A.POST_ID = #{postId}
    </select>

    <select id="selectPostCount" resultType="int">
        SELECT
               Count(A.ID)
          FROM tbl_post A
         WHERE ((A.ORIGIN_ID IS NULL AND A.RECENT_ID IS NULL AND A.DELETED_AT IS NULL)
            OR A.ID IN (
                         SELECT RECENT_ID
                           FROM tbl_post
                          WHERE (ORIGIN_ID IS NULL AND RECENT_ID IS NOT NULL AND DELETED_AT IS NULL)
                         ))
        <if test="request.tabRelationId != null">
            AND A.TAB_RELATION_ID = #{request.tabRelationId}
        </if>
        <if test="request.tabRelationId == null">
            AND A.TAB_RELATION_ID IN
            <foreach collection="request.tabList" item="tab" open="(" close=")" separator="," >
                #{tab}
            </foreach>
        </if>
        <if test="request.categoryId != null">
            AND A.CATEGORY_ID = #{request.categoryId}
        </if>
        <if test="request.categoryId == null">
            AND A.CATEGORY_ID IS NULL
        </if>
        <if test="request.title != null">
            AND A.TITLE LIKE CONCAT('%', #{request.title}, '%')
        </if>
        <if test="request.content != null">
            AND A.CONTENT LIKE CONCAT('%', #{request.content}, '%')
        </if>
        <if test="request.tags != null and !request.tags.isEmpty()">
            AND A.ID IN (
                          SELECT B.POST_ID
                            FROM tbl_post_tag B
                            JOIN tbl_tag C ON B.TAG_ID = C.ID
                           WHERE C.NAME IN
            <foreach collection="request.tags" item="tag" open="(" close=")" separator="," >
                #{tag}
            </foreach>
            GROUP BY B.POST_ID
            HAVING COUNT(DISTINCT C.NAME) = ${request.tags.size}
            )
        </if>
    </select>

    <select id="selectPostById" parameterType="_int" resultMap="postResultMap">
        SELECT
               A.ID AS POST_ID,
               A.TITLE,
               A.CONTENT,
               A.POST_IMG,
               A.CREATED_AT,
               A.AUTHOR_ID,
               A.ORIGIN_ID,
               A.RECENT_ID,
               A.TAB_RELATION_ID,
               A.CATEGORY_ID,
               C.ID AS TAG_ID,
               C.NAME
          FROM tbl_post A
          LEFT JOIN tbl_post_tag B ON (A.ID = B.POST_ID)
          LEFT JOIN tbl_tag C ON (B.TAG_ID = C.ID)
         WHERE CASE
          WHEN (SELECT D.RECENT_ID FROM tbl_post D WHERE D.ID = #{postId}) IS NULL
          THEN A.ID = #{postId}
          ELSE A.ID IN (SELECT D.RECENT_ID FROM tbl_post D WHERE D.ID = #{postId})
           END
    </select>

    <select id="selectHistoryListByOriginId" parameterType="_int" resultMap="postResultMap">
        SELECT
               A.ID AS POST_ID,
               A.TITLE,
               A.CONTENT,
               A.POST_IMG,
               A.CREATED_AT,
               A.AUTHOR_ID,
               A.ORIGIN_ID,
               A.RECENT_ID,
               A.TAB_RELATION_ID,
               A.CATEGORY_ID,
               C.ID AS TAG_ID,
               C.NAME
          FROM tbl_post A
          LEFT JOIN tbl_post_tag B ON (A.ID = B.POST_ID)
          LEFT JOIN tbl_tag C ON (B.TAG_ID = C.ID)
         WHERE A.ID = #{originId}
            OR A.ORIGIN_ID = #{originId}
         ORDER BY CREATED_AT DESC
    </select>

    <select id="selectParticipantsListByOriginId" parameterType="_int">
        SELECT
               DISTINCT(A.AUTHOR_ID)
          FROM tbl_post A
          LEFT JOIN tbl_post_tag B ON (A.ID = B.POST_ID)
          LEFT JOIN tbl_tag C ON (B.TAG_ID = C.ID)
         WHERE A.ID = #{originId}
            OR A.ORIGIN_ID = #{originId}
    </select>

    <select id="selectLikeListByPostId" parameterType="_int" resultMap="likeResultMap">
        SELECT
               A.EMPLOYEE_ID
          FROM tbl_like A
         WHERE A.POST_ID = #{postId}
    </select>

    <select id="selectIsEditingByPostId" parameterType="_int" resultType="boolean">
        SELECT
               A.IS_EDITING
          FROM tbl_post A
         WHERE A.ID = #{postId}
    </select>

    <select id="originAuthorId" parameterType="_int">
        SELECT
               A.AUTHOR_ID
          FROM tbl_post A
         WHERE A.ID = #{postId}
    </select>

    <select id="selectMyPostList" parameterType="_int" resultMap="postResultMap">
        SELECT
               A.ID AS POST_ID,
               A.ORIGIN_ID,
               A.TITLE
          FROM tbl_post A
         WHERE A.ID IN (
        SELECT DISTINCT
          CASE
          WHEN B.RECENT_ID IS NOT NULL AND B.AUTHOR_ID = #{employeeId} THEN B.RECENT_ID
          WHEN B.ORIGIN_ID IS NULL AND B.RECENT_ID IS NULL AND B.AUTHOR_ID = #{employeeId} THEN B.ID
          WHEN B.ORIGIN_ID IS NOT NULL AND B.AUTHOR_ID = #{employeeId} THEN
               (SELECT C.RECENT_ID FROM tbl_post C WHERE C.id = B.ORIGIN_ID)
           END AS my_post_id
          FROM tbl_post B
        )
    </select>

    <select id="selectMyLikeList" parameterType="_int" resultMap="postResultMap">
        SELECT
               A.ID AS POST_ID,
               A.ORIGIN_ID,
               A.TITLE
          FROM tbl_post A
         WHERE A.ID IN (
        SELECT DISTINCT
          CASE
          WHEN B.EMPLOYEE_ID = #{employeeId} AND C.RECENT_ID IS NULL THEN B.POST_ID
          WHEN B.EMPLOYEE_ID = #{employeeId} AND C.RECENT_ID IS NOT NULL THEN C.RECENT_ID
           END AS my_post_id
          FROM tbl_like B
          LEFT JOIN tbl_post C ON B.POST_ID = C.ID
        )
    </select>

    <select id="selectMyFavoriteList" parameterType="_int" resultMap="postResultMap">
        SELECT
               A.ID AS POST_ID,
               A.ORIGIN_ID,
               A.TITLE
          FROM tbl_post A
         WHERE A.ID IN (
        SELECT DISTINCT
          CASE
          WHEN B.EMPLOYEE_ID = #{employeeId} AND C.RECENT_ID IS NULL THEN B.POST_ID
          WHEN B.EMPLOYEE_ID = #{employeeId} AND C.RECENT_ID IS NOT NULL THEN C.RECENT_ID
           END AS my_post_id
          FROM tbl_favorites B
          LEFT JOIN tbl_post C ON B.POST_ID = C.ID
        )
    </select>

    <select id="selectIsLikedByPostId" resultType="int">
        SELECT
               COUNT(*)
          FROM tbl_like A
         WHERE A.EMPLOYEE_ID = #{employeeId}
           AND A.POST_ID = #{postId};
    </select>

    <select id="selectIsFavoriteByPostId" resultType="int">
        SELECT
               COUNT(*)
          FROM tbl_favorites A
         WHERE A.EMPLOYEE_ID = #{employeeId}
           AND A.POST_ID = #{postId};
    </select>

</mapper>